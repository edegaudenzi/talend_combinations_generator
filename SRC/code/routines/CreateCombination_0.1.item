package routines;

import java.util.regex.Pattern;

public class CreateCombination {
	/*Need to valorize them before calling getCombination(). Simply call:
	 * CreateCombination.setCharset("0123456789abcdef");
	 * CreateCombination.setCombinationLength(10);*/
	private static char[] charset;
	private static int charsetLength;
	private static int combinationLength;
	
	public static String getCombination(long iParent) {
		StringBuilder sb = new StringBuilder();
		for(int i=0; i<combinationLength; i++){
			if (iParent==0){ /*Optimization if: it allows to avoid useless cycles*/
				for (int n=0; n < (combinationLength-i); n++){
					sb.append(charset[0]);
				}
				break;
			}
			sb.append(charset[(int)(iParent % charsetLength)]);
			iParent/=charsetLength;
		}
		return sb.toString();
	}
	
	public static void setCharset(String str){
		charset=str.toCharArray();
		charsetLength=charset.length;
	}
	
	public static int getCharsetLength(){
		return charsetLength;
	}
	
	public static void setCombinationLength(int n){
		combinationLength=n;
	}
	
	public static int getCombinationLength(){
		return combinationLength;
	}
	
	public static long pow(int a, int b){
		long res=1L;
		for(int i=0; i<b; i++){
			res*=a;
		}
		return res;
	}

	/*Filters definitions*/
	
//	Regex are more readable, but they are extremely slow. Below the equivalent: gain is 400k rows/sec more.	
//	private static Pattern quadCharPattern = Pattern.compile("(\\w)\\1{3,}");
//	public static boolean isThereAQuadrupleChar(String str){
//		return quadCharPattern.matcher(str).find();
//	}
	
	private static char[] eqChars=new char[4];
	public static boolean isThereAQuadrupleChar(String str){
		char[] cs = str.toCharArray();
		eqChars[0]=cs[2];
		eqChars[1]=cs[1];
		eqChars[2]=cs[0];
		eqChars[3]=cs[0];		
		for (int i=3; i<cs.length; i++){
			eqChars[3]=eqChars[2];
			eqChars[2]=eqChars[1];
			eqChars[1]=eqChars[0];
			eqChars[0]=cs[i];
			if (eqChars[0] == eqChars[1] && eqChars[1]==eqChars[2] && eqChars[2]==eqChars[3]){return true;}
		}
		return false;
	}

}
